# Chunk 1: setup
knitr::opts_chunk$set(fig.align="center", fig.height=4.5, fig.width=5, collapse=TRUE, comment="", prompt=FALSE, echo = TRUE, cache=TRUE, autodep=TRUE, tidy=TRUE, tidy.opts=list(width.cutoff=63))
options(width=63)
# Chunk 2
library(DAAG)
# Chunk 3
(tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex)*100)
# Chunk 4
(tapply(rep(1, times = length(possum[possum$Pop=="Vic",]$sex)), possum[possum$Pop=="Vic",]$sex, sum)/length(possum[possum$Pop=="Vic",]$sex)*100)
(tapply(rep(1, times = length(possum[possum$Pop=="other",]$sex)), possum[possum$Pop=="other",]$sex, sum)/length(possum[possum$Pop=="other",]$sex)*100)
# Chunk 5
sum(dbinom(10:20,20,(tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex))[[1]]))
# Chunk 6
sum(dbinom(7:10,10,sum(dbinom(10:20,20,(tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex))[[1]]))))
# Chunk 7
sex.bin <- as.numeric(possum$sex=="f")
set.seed(2018)
sim.possum <-sapply(1:100000,FUN=function(x){sample(sex.bin,20, replace = T)})
sim.possum.mean <- sapply(1:length(sim.possum[1,]), FUN = function(x){mean(sim.possum[,x])})
length(sim.possum.mean[sim.possum.mean >= .5])/length(sim.possum.mean)*100
# Chunk 8
histogram(possum$hdlngth)
length(possum$hdlngth[possum$hdlngth <= mean(possum$hdlngth) + 2*sd(possum$hdlngth) & possum$hdlngth >= mean(possum$hdlngth) - 2*sd(possum$hdlngth)])/length(possum$hdlngth)
length(possum$hdlngth[possum$hdlngth <= mean(possum$hdlngth) + 3*sd(possum$hdlngth) & possum$hdlngth >= mean(possum$hdlngth) - 3*sd(possum$hdlngth)])/length(possum$hdlngth)
install.packages(DAAG)
install.packages('DAAG'')
;
''
install.packages('DAAG')
possums
```{r}
```{r}
library(DAAG)
(tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex)*100)
possum
possum$Pop
sum(dbinom(10:20,20,(tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex))[[1]]))
possum.percentageFemale = tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex))[[1]]
possum.percentageFemale = tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex)[[1]]
ngth(possum$sex)), possum$sex, sum)/length(possum$sex)
sum(dbinom(10:20,20,possum.percentageFemale[[1]]))
possum.percentageFemale = tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex)
sum(dbinom(10:20,20,possum.percentageFemale[[1]]))
sum(dbinom(7:10,10,sum(dbinom(10:20,20,(tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex))[[1]]))))
sum(dbinom(7:10, 10, sum(dbinom(10:20, 20, (tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex))[[1]]))))
possum.partA = sum(dbinom(10:20, 20, (tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex))[[1]]))
sum(dbinom(7:10, 10, possum.partA))
possum.partA = sum(dbinom(10:20, 20, possum.percentageFemale))
sum(dbinom(7:10, 10, possum.partA))
possum.partA = sum(dbinom(10:20, 20, possum.percentageFemale))
sum(dbinom(7:10, 10, possum.partA))
possum.partA = sum(dbinom(10:20, 20, (tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex))[[1]]))
sum(dbinom(7:10, 10, possum.partA))
possum.partA = sum(dbinom(10:20, 20, possum.percentageFemale[[1]]))
sum(dbinom(7:10, 10, possum.partA))
length(possum$hdlngth[possum$hdlngth <= mean(possum$hdlngth) + 2*sd(possum$hdlngth) & possum$hdlngth >= mean(possum$hdlngth) - 2*sd(possum$hdlngth)])/length(possum$hdlngth)
length(possum$hdlngth[possum$hdlngth <= mean(possum$hdlngth) + 2*sd(possum$hdlngth) & possum$hdlngth >= mean(possum$hdlngth) - 2*sd(possum$hdlngth)])/length(possum$hdlngth)
length(possum$hdlngth[possum$hdlngth <= hdlngth.m + 2 * hdlngth.sd & possum$hdlngth >= hdlngth.m - 2 * hdlngth.sd])/length(possum$hdlngth)
hdlngth.m = mean(possum$hdlngth)
hdlngth.sd = sd(possum$hdlngth)
length(possum$hdlngth[possum$hdlngth <= hdlngth.m + 2 * hdlngth.sd & possum$hdlngth >= hdlngth.m - 2 * hdlngth.sd])/length(possum$hdlngth)
possum.2.sd = possum$hdlngth[possum$hdlngth <= hdlngth.m + 2 * hdlngth.sd & possum$hdlngth >= hdlngth.m - 2 * hdlngth.sd]
length(possum.2.sd)/length(possum$hdlngth)
length(possum.3.sd)/length(possum$hdlngth)
possum.3.sd = possum$hdlngth[possum$hdlngth <= hdlngth.m + 3 * hdlngth.sd & possum$hdlngth >= hdlngth.m - 3 * hdlngth.sd]
length(possum.3.sd)/length(possum$hdlngth)
length(possum$hdlngth[possum$hdlngth <= mean(possum$hdlngth) + 3*sd(possum$hdlngth) & possum$hdlngth >= mean(possum$hdlngth) - 3*sd(possum$hdlngth)])/length(possum$hdlngth)
qnorm
help?
;
?qnorm
# 95% confidence interval
confidence = 0.95
lowerbound = qnorm((1 - confidence) / 2)
upperbound = qnorm(confidence + ((1 - confidence) / 2))
n = length(possum)
n = length(possum$hdlngth)
# 95% confidence interval
confidence = 0.95
sd = sd(possum$hdlngth)
n = length(possum$hdlngth)
m = mean(possum$hdlngth)
upperbound.z = qnorm(confidence + ((1 - confidence) / 2))
lowerbound.z = qnorm((1 - confidence) / 2)
upperbound.hdlngth = m + (upperbound.z * (sd / sqrt(n)))
lowerbound.hdlngth = m - (upperbound.z * (sd / sqrt(n)))
print(sprintf("%2f confidence interval: (%2f, %2f)", confidence, upperbound.hdlngth, lowerbound.hdlngth))
# 95% confidence interval
confidence = 0.95
sd = sd(possum$hdlngth)
n = length(possum$hdlngth)
m = mean(possum$hdlngth)
upperbound.z = qnorm(confidence + ((1 - confidence) / 2))
lowerbound.z = qnorm((1 - confidence) / 2)
upperbound.hdlngth = m + (upperbound.z * (sd / sqrt(n)))
lowerbound.hdlngth = m - (upperbound.z * (sd / sqrt(n)))
print(sprintf("%2.2f confidence interval: (%2.2f, %2.2f)",
confidence * 100,
upperbound.hdlngth * 100,
lowerbound.hdlngth * 100
))
# 95% confidence interval
confidence = 0.95
sd = sd(possum$hdlngth)
n = length(possum$hdlngth)
m = mean(possum$hdlngth)
upperbound.z = qnorm(confidence + ((1 - confidence) / 2))
lowerbound.z = qnorm((1 - confidence) / 2)
upperbound.hdlngth = m + (upperbound.z * (sd / sqrt(n)))
lowerbound.hdlngth = m - (upperbound.z * (sd / sqrt(n)))
print(sprintf("%2.2f confidence interval: (%2.2f, %2.2f)",
confidence * 100,
upperbound.hdlngth,
lowerbound.hdlngth
))
# 95% confidence interval
confidence = 0.95
sd = sd(possum$hdlngth)
n = length(possum$hdlngth)
m = mean(possum$hdlngth)
upperbound.z = qnorm(confidence + ((1 - confidence) / 2))
lowerbound.z = qnorm((1 - confidence) / 2)
upperbound.hdlngth = m + (upperbound.z * (sd / sqrt(n)))
lowerbound.hdlngth = m - (upperbound.z * (sd / sqrt(n)))
print(sprintf("%2.2f%% confidence interval: (%2.2f, %2.2f)",
confidence * 100,
upperbound.hdlngth,
lowerbound.hdlngth
))
# 95% confidence interval
confidence = 0.95
sd = sd(possum$hdlngth)
n = length(possum$hdlngth)
m = mean(possum$hdlngth)
upperbound.z = qnorm(confidence + ((1 - confidence) / 2))
lowerbound.z = qnorm((1 - confidence) / 2)
upperbound.hdlngth = m + (upperbound.z * (sd / sqrt(n)))
lowerbound.hdlngth = m - (upperbound.z * (sd / sqrt(n)))
print(sprintf("%2f%% confidence interval: (%2.2f, %2.2f)",
confidence * 100,
upperbound.hdlngth,
lowerbound.hdlngth
))
# 95% confidence interval
confidence = 0.95
sd = sd(possum$hdlngth)
n = length(possum$hdlngth)
m = mean(possum$hdlngth)
upperbound.z = qnorm(confidence + ((1 - confidence) / 2))
lowerbound.z = qnorm((1 - confidence) / 2)
upperbound.hdlngth = m + (upperbound.z * (sd / sqrt(n)))
lowerbound.hdlngth = m - (upperbound.z * (sd / sqrt(n)))
print(sprintf("%2.f%% confidence interval: (%2.2f, %2.2f)",
confidence * 100,
upperbound.hdlngth,
lowerbound.hdlngth
))
make.CI = function(input.vector, percentage.conf) {
sd = sd(input.vector)
n = length(input.vector)
m = mean(input.vector)
upperbound.z = qnorm(percentage.conf + ((1 - percentage.conf) / 2))
lowerbound.z = qnorm((1 - percentage.conf) / 2)
upperbound = m + (upperbound.z * (sd / sqrt(n)))
lowerbound = m - (upperbound.z * (sd / sqrt(n)))
ret (upperbound, lowerbound)
}
make.CI(possum$hdlngth, 0.95)
make.CI = function(input.vector, percentage.conf) {
sd = sd(input.vector)
n = length(input.vector)
m = mean(input.vector)
upperbound.z = qnorm(percentage.conf + ((1 - percentage.conf) / 2))
lowerbound.z = qnorm((1 - percentage.conf) / 2)
upperbound = m + (upperbound.z * (sd / sqrt(n)))
lowerbound = m - (upperbound.z * (sd / sqrt(n)))
return (upperbound, lowerbound)
}
make.CI(possum$hdlngth, 0.95)
make.CI = function(input.vector, percentage.conf) {
sd = sd(input.vector)
n = length(input.vector)
m = mean(input.vector)
upperbound.z = qnorm(percentage.conf + ((1 - percentage.conf) / 2))
lowerbound.z = qnorm((1 - percentage.conf) / 2)
upperbound = m + (upperbound.z * (sd / sqrt(n)))
lowerbound = m - (upperbound.z * (sd / sqrt(n)))
return c(upperbound, lowerbound)
}
make.CI(possum$hdlngth, 0.95)
make.CI = function(input.vector, percentage.conf) {
sd = sd(input.vector)
n = length(input.vector)
m = mean(input.vector)
upperbound.z = qnorm(percentage.conf + ((1 - percentage.conf) / 2))
lowerbound.z = qnorm((1 - percentage.conf) / 2)
upperbound = m + (upperbound.z * (sd / sqrt(n)))
lowerbound = m - (upperbound.z * (sd / sqrt(n)))
return(c(upperbound, lowerbound))
}
make.CI(possum$hdlngth, 0.95)
# 95% confidence interval
confidence = 0.95
sd = sd(possum$hdlngth)
n = length(possum$hdlngth)
m = mean(possum$hdlngth)
upperbound.z = qnorm(confidence + ((1 - confidence) / 2))
lowerbound.z = qnorm((1 - confidence) / 2)
upperbound.hdlngth = m + (upperbound.z * (sd / sqrt(n)))
lowerbound.hdlngth = m - (upperbound.z * (sd / sqrt(n)))
print(sprintf("%2.f%% confidence interval: (%2.2f, %2.2f)",
confidence * 100,
upperbound.hdlngth,
lowerbound.hdlngth
))
# 95% confidence interval
confidence = 0.95
sd = sd(possum$hdlngth)
n = length(possum$hdlngth)
m = mean(possum$hdlngth)
upperbound.z = qnorm(confidence + ((1 - confidence) / 2))
lowerbound.z = qnorm((1 - confidence) / 2)
upperbound.hdlngth = m + (upperbound.z * (sd / sqrt(n)))
lowerbound.hdlngth = m - (upperbound.z * (sd / sqrt(n)))
print(sprintf("%2.f%% confidence interval: (%2.2f, %2.2f)",
confidence * 100,
lowerbound.hdlngth,
upperbound.hdlngth
))
make.CI = function(input.vector, percentage.conf) {
sd = sd(input.vector)
n = length(input.vector)
m = mean(input.vector)
upperbound.z = qnorm(percentage.conf + ((1 - percentage.conf) / 2))
lowerbound.z = qnorm((1 - percentage.conf) / 2)
upperbound = m + (upperbound.z * (sd / sqrt(n)))
lowerbound = m - (upperbound.z * (sd / sqrt(n)))
return(c(lowerbound, upperbound))
}
make.CI(possum$hdlngth, 0.95)
# 90% CI for average total length
make.CI(possum$totlngth, 0.90)
# 90% CI for average tail length
make.CI(possum$taill, 0.90)
summary(possum#totlngth)
jkl;fdasf
summary(possum$totlngth)
# Chunk 1: setup
knitr::opts_chunk$set(fig.align="center", fig.height=4.5, fig.width=5, collapse=TRUE, comment="", prompt=FALSE, echo = TRUE, cache=TRUE, autodep=TRUE, tidy=TRUE, tidy.opts=list(width.cutoff=63))
options(width=63)
# Chunk 2
library(DAAG)
# Chunk 3
(tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex)*100)
# Chunk 4
(tapply(rep(1, times = length(possum[possum$Pop=="Vic",]$sex)), possum[possum$Pop=="Vic",]$sex, sum)/length(possum[possum$Pop=="Vic",]$sex)*100)
(tapply(rep(1, times = length(possum[possum$Pop=="other",]$sex)), possum[possum$Pop=="other",]$sex, sum)/length(possum[possum$Pop=="other",]$sex)*100)
# Chunk 5
possum.percentageFemale = tapply(rep(1, times = length(possum$sex)), possum$sex, sum)/length(possum$sex)
sum(dbinom(10:20, 20, possum.percentageFemale[[1]]))
# Chunk 6
possum.partA = sum(dbinom(10:20, 20, possum.percentageFemale[[1]]))
sum(dbinom(7:10, 10, possum.partA))
# Chunk 7
sex.bin <- as.numeric(possum$sex=="f")
set.seed(2018)
sim.possum <-sapply(1:100000,FUN=function(x){sample(sex.bin,20, replace = T)})
sim.possum.mean <- sapply(1:length(sim.possum[1,]), FUN = function(x){mean(sim.possum[,x])})
length(sim.possum.mean[sim.possum.mean >= .5])/length(sim.possum.mean)*100
# Chunk 8
histogram(possum$hdlngth)
# Statistics
hdlngth.m = mean(possum$hdlngth)
hdlngth.sd = sd(possum$hdlngth)
possum.2.sd = possum$hdlngth[possum$hdlngth <= hdlngth.m + 2 * hdlngth.sd & possum$hdlngth >= hdlngth.m - 2 * hdlngth.sd]
possum.3.sd = possum$hdlngth[possum$hdlngth <= hdlngth.m + 3 * hdlngth.sd & possum$hdlngth >= hdlngth.m - 3 * hdlngth.sd]
length(possum.2.sd)/length(possum$hdlngth)
length(possum.3.sd)/length(possum$hdlngth)
# Chunk 9
# 95% confidence interval
confidence = 0.95
sd = sd(possum$hdlngth)
n = length(possum$hdlngth)
m = mean(possum$hdlngth)
upperbound.z = qnorm(confidence + ((1 - confidence) / 2))
lowerbound.z = qnorm((1 - confidence) / 2)
upperbound.hdlngth = m + (upperbound.z * (sd / sqrt(n)))
lowerbound.hdlngth = m - (upperbound.z * (sd / sqrt(n)))
print(sprintf("%2.f%% confidence interval: (%2.2f, %2.2f)",
confidence * 100,
lowerbound.hdlngth,
upperbound.hdlngth
))
# Chunk 10
make.CI = function(input.vector, percentage.conf) {
sd = sd(input.vector)
n = length(input.vector)
m = mean(input.vector)
upperbound.z = qnorm(percentage.conf + ((1 - percentage.conf) / 2))
lowerbound.z = qnorm((1 - percentage.conf) / 2)
upperbound = m + (upperbound.z * (sd / sqrt(n)))
lowerbound = m - (upperbound.z * (sd / sqrt(n)))
return(c(lowerbound, upperbound))
}
# Chunk 11
# Same as part E
make.CI(possum$hdlngth, 0.95)
# 90% CI for average total length
make.CI(possum$totlngth, 0.90)
# 90% CI for average tail length
make.CI(possum$taill, 0.90)
